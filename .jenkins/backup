#!/usr/bin/env groovy
// Copyright (C) 2023 Edge Network Technologies Limited
// Use of this source code is governed by a GNU GPL-style license
// that can be found in the LICENSE.md file. All rights reserved.

def b64e(input) {
  return input.bytes.encodeBase64().toString()
}

def backupArangoDB(container, name, dir, db, username, password) {
  return """
  # backup arangodb
  docker exec ${container} mkdir -p /dump &&\
  docker exec ${container} arangodump \
    --overwrite true \
    --server.database ${db} \
    --server.username ${username} \
    --server.password ${password} &&\
  docker exec ${container} tar -cz /dump -f dump.tar &&\
  docker cp ${container}:/dump.tar ${dir}/${name}.arangodb-${db}.tar &&\
  docker exec ${container} rm -r /dump /dump.tar
  """
}

def removeAgedBackups(dir, keep) {
  return """
  # remove aged backups
  find ${dir} -maxdepth 1 -type f -mtime +${keep} -exec rm -v {} \\;
  """
}

def syncBackups(dir, host, hostDir, keep) {
  return """
  # sync backups to offsite storage and remove aged remote backups
  ssh ${host} 'mkdir -p ${hostDir}' &&\
  rsync -avz ${dir}/ ${host}:${hostDir}/ &&\
  ssh ${host} 'find ${hostDir} -maxdepth 1 -type f -mtime +${keep} -exec rm -v {} \\;'
  """
}

pipeline {
  agent {
    label 'local'
  }
  stages {
    stage('Backup') {
      steps {
        script {
          def keep = env.KEEP != null ? env.KEEP : 3
          def keepRemote = env.KEEP_REMOTE != null ? env.KEEP_REMOTE : 10
          def sshPort = env.SSH_PORT != null ? env.SSH_PORT : 22
          def ssh = "ssh -o ServerAliveInterval=120 -o ServerAliveCountMax=5 -o StrictHostKeyChecking=no -p ${sshPort} jenkins@${DEPLOY_TARGET} "

          withCredentials([
            usernamePassword(credentialsId: DB_AUTH, usernameVariable: 'DB_USERNAME', passwordVariable: 'DB_PASSWORD')
          ]) {
            // Using a pre-authorized key, connect to the specified server and run the backup script.
            sshagent(credentials : ['a687b920-fcb4-41e4-a878-5ae1f6850b26']) {
              BACKUP_NAME = "index.${BUILD_NUMBER}"

              SCRIPT_ARANGO = backupArangoDB(DB_CONTAINER, BACKUP_NAME, BACKUP_DIR, DB_NAME, DB_USERNAME, DB_PASSWORD)
              SCRIPT_CLEANUP = removeAgedBackups(BACKUP_DIR, keep)
              SCRIPT_SYNC = syncBackups(BACKUP_DIR, REMOTE_BACKUP_HOST, REMOTE_BACKUP_DIR, keepRemote)

              SCRIPT = b64e("""
              #!/bin/bash
              mkdir -p ${BACKUP_DIR}
              $SCRIPT_ARANGO
              $SCRIPT_CLEANUP
              $SCRIPT_SYNC
              """)

              sh "$ssh 'echo $SCRIPT | base64 -d > ${BACKUP_NAME}.sh && \
                sh ${BACKUP_NAME}.sh && \
                rm ${BACKUP_NAME}.sh'"
            }
          }
        }
      }
    }
  }
}
