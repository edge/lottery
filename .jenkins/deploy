#!/usr/bin/env groovy
// Copyright (C) 2022 Edge Network Technologies Limited
// Use of this source code is governed by a GNU GPL-style license
// that can be found in the LICENSE.md file. All rights reserved.

def b64e(input) {
  return input.bytes.encodeBase64().toString()
}

def deployScript() {
  return b64e('''
  #!/bin/bash

  # Pull the latest version
  docker pull $IMAGE

  # Gracefully stop/remove existing service (if it exists)
  docker stop $NAME 2>/dev/null
  docker rm $NAME 2>/dev/null

  # And then run it again
  docker run \
    --detach \
    --name $NAME \
    --restart always \
    --network core-network \
    --expose $HTTP_PORT \
    --env HTTP_PORT=$HTTP_PORT \
    --env LETSENCRYPT_EMAIL="adam@edge.network" \
    --env LETSENCRYPT_HOST=$LETSENCRYPT_HOST \
    --env LOG_LEVEL=$LOG_LEVEL \
    --env ARANGODB_URL=$ARANGODB_URL \
    --env ARANGODB_USERNAME=$ARANGODB_USERNAME \
    --env ARANGODB_PASSWORD=$ARANGODB_PASSWORD \
    --env ARANGODB_DATABASE=$ARANGODB_DATABASE \
    --env BLOCKCHAIN_HOST=$BLOCKCHAIN_HOST \
    --env BLOCKCHAIN_SYNC_ENABLED=$BLOCKCHAIN_SYNC_ENABLED \
    --env BLOCKCHAIN_SYNC_INTERVAL=$BLOCKCHAIN_SYNC_INTERVAL \
    --env BLOCKCHAIN_SYNC_BATCH_SIZE=$BLOCKCHAIN_SYNC_BATCH_SIZE \
    --env BLOCKCHAIN_SYNC_PAGE_SIZE=$BLOCKCHAIN_SYNC_PAGE_SIZE \
    --env EARNINGS_HOST=$EARNINGS_HOST \
    --env FUNDS_DISTRIBUTION=$FUNDS_DISTRIBUTION \
    --env FUNDS_PAYER_ADDRESS=$FUNDS_PAYER_ADDRESS \
    --env FUNDS_PAYER_PRIVATE_KEY=$FUNDS_PAYER_PRIVATE_KEY \
    --env PAYOUT_CONFIRM_ENABLED=$PAYOUT_CONFIRM_ENABLED \
    --env PAYOUT_CONFIRM_GRACE_PERIOD=$PAYOUT_CONFIRM_GRACE_PERIOD \
    --env PAYOUT_CONFIRM_INTERVAL=$PAYOUT_CONFIRM_INTERVAL \
    --env PAYOUT_CONFIRM_THRESHOLD=$PAYOUT_CONFIRM_THRESHOLD \
    --env PAYOUT_SUBMIT_BATCH_SIZE=$PAYOUT_SUBMIT_BATCH_SIZE \
    --env PAYOUT_SUBMIT_DRY_RUN=$PAYOUT_SUBMIT_DRY_RUN \
    --env PAYOUT_SUBMIT_ENABLED=$PAYOUT_SUBMIT_ENABLED \
    --env PAYOUT_SUBMIT_INTERVAL=$PAYOUT_SUBMIT_INTERVAL \
    --env START_TIME=$START_TIME \
    --env NETWORK_ACCESS=$NETWORK_ACCESS \
    --env VIRTUAL_HOST=$VIRTUAL_HOST \
    --volume $NAME-data:/data \
    $IMAGE
  ''')
}

pipeline {
  agent {
    label 'local'
  }
  stages {
    stage('Deploy') {
      steps {
        script {
          def sshPort = env.SSH_PORT != null ? env.SSH_PORT : 22
          def ssh = "ssh -o ServerAliveInterval=120 -o ServerAliveCountMax=5 -o StrictHostKeyChecking=no -p ${sshPort} jenkins@${DEPLOY_TARGET} "
          def uuid = "${UUID.randomUUID().toString()}"
          def filename = "deploy_${uuid}.sh"
          def script = deployScript()

          withCredentials([
            usernamePassword(credentialsId: ARANGODB_AUTH, usernameVariable: 'ARANGODB_USERNAME', passwordVariable: 'ARANGODB_PASSWORD'),
            string(credentialsId: NEWRELIC_API_KEY, variable: 'NEWRELIC_API_KEY_VALUE'),
            usernamePassword(credentialsId: FUNDS_PAYER, usernameVariable: 'FUNDS_PAYER_ADDRESS', passwordVariable: 'FUNDS_PAYER_PRIVATE_KEY'),
          ]) {
            // Using a pre-authorized key, connect to the specified server and run the deploy script.
            sshagent(credentials : ['a687b920-fcb4-41e4-a878-5ae1f6850b26']) {
              println "> deploying ${IMAGE} ($NAME) to ${DEPLOY_TARGET}..."
              sh "$ssh 'echo $script | base64 -d > ${filename} && \
                chmod +x ${filename} && \
                NAME=$NAME \
                IMAGE=$IMAGE \
                HTTP_PORT=$HTTP_PORT \
                LETSENCRYPT_HOST=$DOMAIN \
                LOG_LEVEL=$LOG_LEVEL \
                NEWRELIC_API_KEY=$NEWRELIC_API_KEY_VALUE \
                ARANGODB_URL=$ARANGODB_URL \
                ARANGODB_USERNAME=$ARANGODB_USERNAME \
                ARANGODB_PASSWORD=$ARANGODB_PASSWORD \
                ARANGODB_DATABASE=$ARANGODB_DATABASE \
                BLOCKCHAIN_HOST=$BLOCKCHAIN_HOST \
                BLOCKCHAIN_SYNC_ENABLED=$BLOCKCHAIN_SYNC_ENABLED \
                BLOCKCHAIN_SYNC_INTERVAL=$BLOCKCHAIN_SYNC_INTERVAL \
                BLOCKCHAIN_SYNC_BATCH_SIZE=$BLOCKCHAIN_SYNC_BATCH_SIZE \
                BLOCKCHAIN_SYNC_PAGE_SIZE=$BLOCKCHAIN_SYNC_PAGE_SIZE \
                EARNINGS_HOST=$EARNINGS_HOST \
                EARNINGS_SYNC_INTERVAL=$EARNINGS_SYNC_INTERVAL \
                EARNINGS_SYNC_PAGE_SIZE=$EARNINGS_SYNC_PAGE_SIZE \
                FUNDS_DISTRIBUTION=$FUNDS_DISTRIBUTION \
                FUNDS_PAYER_ADDRESS=$FUNDS_PAYER_ADDRESS \
                FUNDS_PAYER_PRIVATE_KEY=$FUNDS_PAYER_PRIVATE_KEY \
                PAYOUT_CONFIRM_ENABLED=$PAYOUT_CONFIRM_ENABLED \
                PAYOUT_CONFIRM_GRACE_PERIOD=$PAYOUT_CONFIRM_GRACE_PERIOD \
                PAYOUT_CONFIRM_INTERVAL=$PAYOUT_CONFIRM_INTERVAL \
                PAYOUT_CONFIRM_THRESHOLD=$PAYOUT_CONFIRM_THRESHOLD \
                PAYOUT_SUBMIT_BATCH_SIZE=$PAYOUT_SUBMIT_BATCH_SIZE \
                PAYOUT_SUBMIT_DRY_RUN=$PAYOUT_SUBMIT_DRY_RUN \
                PAYOUT_SUBMIT_ENABLED=$PAYOUT_SUBMIT_ENABLED \
                PAYOUT_SUBMIT_INTERVAL=$PAYOUT_SUBMIT_INTERVAL \
                START_TIME=$START_TIME \
                NETWORK_ACCESS=$NETWORK_ACCESS \
                VIRTUAL_HOST=$DOMAIN \
                  bash -x ./${filename} && \
                rm ${filename}'"
            }
          }
        }
      }
    }
  }
  post {
    success {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) has been deployed", result: "SUCCESS", webhookURL: DISCORD_DEPLOY_WEBHOOK
      }
    }
    failure {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) failed to deploy", result: "FAILURE", webhookURL: DISCORD_DEPLOY_WEBHOOK
      }
    }
    aborted {
      script {
        discordSend title: JOB_NAME, description: "${env.JOB_NAME} (#${env.BUILD_NUMBER}) was aborted", result: "ABORTED", webhookURL: DISCORD_DEPLOY_WEBHOOK
      }
    }
  }
}
